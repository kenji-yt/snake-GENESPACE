## Check minimum Snakemake version

from snakemake.utils import min_version

min_version("5.20.1")

## Import required libraries
import os


## Configuration check
if len(config) == 0:
    
    error_msg=f"Please specify the path to the input directory with --config INPUT_DIR='path/to/input_directory'."
    raise ValueError(error_msg)


## Config
INPUT_DIR = os.path.normpath(config["INPUT_DIR"])
SCRIPTS_DIR = config.get("SCRIPTS_DIR", f"{workflow.basedir}/scripts") # For integration into HEAL (reverse dependency)

## Define number of cores for parsing
count = 0
for item in os.listdir(f"{INPUT_DIR}"):
    item_path = os.path.join(f"{INPUT_DIR}", item)
    # Check if the item is a directory and not excluded
    if os.path.isdir(item_path) and item not in ["bed", "peptide"]:
        count += 1
genespace_parse_threads = count if count < workflow.cores else workflow.cores



## Rules

rule all:
    input:
        "results/snake_GENESPACE_reproducibility_report.txt"


rule make_reproducibility_report:
    input:
        input_dir=f"{INPUT_DIR}",
        run_log="results/logs/genespace/genespace_run.log",
    output:
        "results/snake_GENESPACE_reproducibility_report.txt",
    params:
        scripts=f"{SCRIPTS_DIR}",
        cores=workflow.cores
    threads:1
    conda:
        "envs/genespace.yaml",
    shell:
        "bash {params.scripts}/make_GENESPACE_reproducibility_report.sh {input.input_dir} {params.cores}"


rule run_genespace:
    input:
        mc_scan_install_log="results/logs/MCScanX/MScanX_install.log", 
        genespace_run_dir="results/genespace/run_dir",
    output:
        "results/logs/genespace/genespace_run.log"
    params:
        mc_scan_dir="results/genespace/MCScanX/",
        scripts=f"{SCRIPTS_DIR}"
    log:
        "results/logs/genespace/genespace_run.log",
    threads:workflow.cores
    conda:
        "envs/genespace.yaml",
    script:
        "scripts/run_genespace.R" 


rule parse_genespace_input:
    input:
        input_dir=f"{INPUT_DIR}",
    output:
        genespace_run_dir=directory("results/genespace/run_dir"),
    params:
        scripts=f"{SCRIPTS_DIR}"
    log:
        "results/logs/genespace/parse_genespace_input/", 
    threads:genespace_parse_threads
    conda:
        "envs/genespace.yaml",
    shell: # Could use scripts and associative arrays actually. 
        "bash {params.scripts}/parse_genespace_input.sh -i {input.input_dir} -o {output.genespace_run_dir} -l {log} -c {threads}" 



rule install_MCScanX:
    input:
        mc_scan_dir="results/genespace/MCScanX",
    log:
        "results/logs/MCScanX/MScanX_install.log",
    conda:
        "envs/genespace.yaml",
    shell:
        "make -C {input.mc_scan_dir}" 


rule download_MCScanX:
    output:
        mc_scan_dir=directory("results/genespace/MCScanX"),
    log:
        "results/logs/MCScanX/MCScanX_dowload.log",
    conda:
        "envs/genespace.yaml",
    shell:
        "git clone https://github.com/wyp1125/MCScanX {output.mc_scan_dir}"





